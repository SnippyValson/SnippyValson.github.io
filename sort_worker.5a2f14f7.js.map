{"version":3,"sources":["views/benchmarks/subviews/sorting_benchmarks/workers/sort_methods.js","views/benchmarks/subviews/sorting_benchmarks/workers/sort_worker.js"],"names":["quickSort","array","low","high","pivot","partition","i","j","temp","quickSortFast","left","right","length","partitionFast","Math","floor","bubbleSort","insertionSort","key","selectionSort","minIndex","merge","array1","array2","sorted","push","shift","concat","slice","mergeSort","l","r","middle","radixSort","console","log","maxLength","largestNum","buckets","Array","from","num","getNum","undefined","flat","index","strNum","String","end","foundNum","largest","forEach","heapify","arrayLength","max","swap","a","b","heapSort","onmessage","e","data","sortType","postMessage"],"mappings":"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","file":"sort_worker.5a2f14f7.js","sourceRoot":"../src","sourcesContent":["export function quickSort(array, low, high) {\n    if (low < high) {\n        let pivot = partition(array, low, high);\n        if (low < pivot - 1) {\n            quickSort(array, low, pivot - 1);\n        }\n        if (high > pivot + 1) {\n            quickSort(array, pivot + 1, high);\n        }\n    }\n    return array;\n}\n\nfunction partition(array, low, high) {\n    let pivot = array[high];\n    let i = low - 1;\n    for (let j = low; j < high; j++) {\n        if (array[j] < pivot) {\n            i++;\n            if (i != j) {\n                let temp = array[j];\n                array[j] = array[i];\n                array[i] = temp;\n            }\n        }\n    }\n    let temp = array[i + 1];\n    array[i + 1] = array[high];\n    array[high] = temp;\n    return i + 1;\n}\n\nexport function quickSortFast(array, left, right) {\n    var pivot;\n    if (array.length > 1) {\n        pivot = partitionFast(array, left, right);\n        if (left < pivot - 1) {\n            quickSortFast(array, left, pivot - 1);\n        }\n        if (pivot < right) {\n            quickSortFast(array, pivot, right);\n        }\n    }\n    return array;\n}\n\nfunction partitionFast(array, left, right) {\n    let pivot = array[Math.floor((right + left) / 2)];\n    let i = left;\n    let j = right;\n    while (i <= j) {\n        while (array[i] < pivot) {\n            i++;\n        }\n        while (array[j] > pivot) {\n            j--;\n        }\n        if (i <= j) {\n            let temp = array[i];\n            array[i] = array[j];\n            array[j] = temp;\n            i++;\n            j--;\n        }\n    }\n    return i;\n}\n\nexport function bubbleSort(array) {\n    for (let i = 0; i < array.length; i++) {\n        for (let j = 0; j < array.length - i - 1; j++) {\n            if (array[j] > array[j + 1]) {\n                let temp = array[j];\n                array[j] = array[j + 1];\n                array[j + 1] = temp;\n            }\n        }\n    }\n}\n\nexport function insertionSort(array) {\n    for (let i = 1; i < array.length; i++) {\n        let key = array[i];\n        let j = i - 1;\n        while (j >= 0 && array[j] > key) {\n            array[j + 1] = array[j]\n            j = j - 1;\n        }\n        array[j + 1] = key;\n    }\n}\n\nexport function selectionSort(array) {\n    for (let i = 0; i < array.length - 1; i++) {\n        let minIndex = i;\n        for (let j = i + 1; j < array.length; j++) {\n            if (array[j] < array[minIndex]) {\n                minIndex = j;\n            }\n        }\n        if (minIndex != i) {\n            let temp = array[i];\n            array[i] = array[minIndex];\n            array[minIndex] = temp;\n        }\n    }\n}\n\nfunction merge(array1, array2) {\n    let sorted = [];\n    while (array1.length && array2.length) {\n        if (array1[0] < array2[0]) {\n            sorted.push(array1.shift());\n        } else {\n            sorted.push(array2.shift());\n        }\n    }\n    return sorted.concat(array1.slice().concat(array2.slice()));\n}\n\nexport function mergeSort(array, l, r) {\n    if (array.length <= 1) {\n        return array;\n    }\n    let middle = Math.floor(array.length / 2),\n        left = mergeSort(array.slice(0, middle)),\n        right = mergeSort(array.slice(middle));\n    return merge(left, right);\n}\n\nexport function radixSort(array) {\n    console.log(`Radix sort`);\n    let maxLength = largestNum(array);\n    for (let i = 0; i < maxLength; i++) {\n        let buckets = Array.from({\n            length: 10\n        }, () => []);\n        for (let j = 0; j < array.length; j++) {\n            let num = getNum(array[j], i);\n            if (num != undefined) buckets[num].push(array[j]);\n        }\n        array = buckets.flat();\n    }\n    return array;\n}\n\nfunction getNum(num, index) {\n    const strNum = String(num);\n    let end = strNum.length - 1;\n    const foundNum = strNum[end - index];\n    if (foundNum === undefined) {\n        return 0;\n    } else {\n        return foundNum;\n    }\n}\n\nfunction largestNum(array) {\n    let largest = \"0\";\n    array.forEach(num => {\n        const strNum = String(num);\n        if (strNum.length > largest.length) {\n            largest = strNum;\n        }\n    });\n    return largest.length;\n}\n\nfunction heapify(array, index, arrayLength) {\n    var left = 2 * index + 1;\n    var right = 2 * index + 2;\n    var max = index;\n    if (left < arrayLength && array[left] > array[max]) {\n        max = left;\n    }\n    if (right < arrayLength && array[right] > array[max]) {\n        max = right;\n    }\n    if (max != index) {\n        swap(array, index, max);\n        heapify(array, max);\n    }\n}\n\nfunction swap(array, a, b) {\n    let temp = array[a];\n    array[a] = array[b];\n    array[b] = temp;\n}\n\nexport function heapSort(array) {\n    let arrayLength = array.length;\n    for (let i = Math.floor(array.length / 2); i >= 0; i--) {\n        heapify(array, i, arrayLength);\n    }\n    for (let i = array.length - 1; i > 0; i--) {\n        swap(array, 0, i);\n        arrayLength--;\n        heapify(array, 0, arrayLength);\n    }\n}","import {\n  quickSortFast,\n  bubbleSort,\n  insertionSort,\n  selectionSort,\n  mergeSort,\n  radixSort,\n  heapSort\n} from \"./sort_methods\"\n\nonmessage = function (e) {\n  var array = e.data.array;\n  var sortType = e.data.sortType;\n  switch (sortType) {\n    case 0: {\n      quickSortFast(array, 0, array.length - 1);\n    }\n    break;\n  case 1: {\n    bubbleSort(array);\n  }\n  break;\n  case 2: {\n    insertionSort(array);\n  }\n  break;\n  case 3: {\n    selectionSort(array);\n  }\n  break;\n  case 4: {\n    mergeSort(array, 0, array.length - 1);\n  }\n  break;\n  case 5: {\n    radixSort(array);\n  }\n  break;\n  case 6: {\n    heapSort(array);\n  }\n  break;\n  }\n  postMessage({\n    array: array,\n    sortType: sortType\n  });\n}"]}